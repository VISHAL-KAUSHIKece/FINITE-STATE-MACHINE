`timescale 1ns/1ps

module fsm_sequence_tb;

  reg clk;
  reg rst;
  reg in;
  wire out;

  // Instantiate DUT (Design Under Test)
  fsm_sequence dut (
    .clk(clk),
    .rst(rst),
    .in(in),
    .out(out)
  );

  // Clock generation: 10ns period
  always #5 clk = ~clk;

  // Stimulus
  initial begin
    // Monitor signals
    $monitor("Time=%0t | clk=%b | rst=%b | in=%b | present_state=%b | out=%b",
             $time, clk, rst, in, dut.present_state, out);

    // Initialize
    clk = 0;
    rst = 0;
    in  = 0;

    // Apply reset
    #12 rst = 1;

    // Test sequence: 10101010
    #10 in = 1;  // ->1
    #10 in = 0;  // ->10
    #10 in = 1;  // ->101
    #10 in = 0;  // ->1010 ✅ detect
    #10 in = 1;  // ->1
    #10 in = 0;  // ->10
    #10 in = 1;  // ->101
    #10 in = 0;  // ->1010 ✅ detect again

    // Random bits
    #10 in = 1;
    #10 in = 1;
    #10 in = 0;
    #10 in = 1;
    #10 in = 0;  // another detect

    #20 $finish;
  end

endmodule
